# Autogenerated config.py
# Documentation:
#   qute://help/configuring.html
#   qute://help/settings.html
color0 = '#<COLOR0>'
color1 = '#<COLOR1>'
color2 = '#<COLOR2>'
color3 = '#<COLOR3>'
color4 = '#<COLOR4>'
color5 = '#<COLOR5>'
color6 = '#<COLOR6>'
color7 = '#<COLOR7>'
color8 = '#<COLOR8>'
color9 = '#<COLOR9>'
color10 = '#<COLOR10>'
color11 = '#<COLOR11>'
color12 = '#<COLOR12>'
color13 = '#<COLOR13>'
color14 = '#<COLOR14>'
color15 = '#<COLOR15>'
colora = '#<COLORACT>'
colori = '#<COLORIN>'

background_color = '#202020'

# Uncomment this to still load settings configured via autoconfig.yml
# config.load_autoconfig()

# Aliases for commands. The keys of the given dictionary are the
# aliases, while the values are the commands they map to.
# Type: Dict
c.aliases = {'q': 'quit', 'w': 'session-save', 'wq': 'quit --save'}

# Always restore open sites when qutebrowser is reopened.
# Type: Bool
c.auto_save.session = True

# Background color of the statusbar in command mode.
# Type: QssColor
c.colors.statusbar.command.bg = background_color
c.colors.statusbar.command.fg = color15

c.colors.statusbar.normal.bg = background_color
c.colors.statusbar.normal.fg = color15

c.colors.statusbar.url.success.http.fg = color13
c.colors.statusbar.url.success.https.fg = color14
c.colors.statusbar.url.success.http.fg = color13
c.colors.statusbar.url.success.https.fg = color14
c.colors.statusbar.url.error.fg = color9

# Background color of unselected even tabs.
# Type: QtColor
c.colors.tabs.even.bg = color11
c.colors.tabs.odd.bg = color11
c.colors.tabs.bar.bg = background_color

# Background color of selected tabs.
c.colors.tabs.selected.even.bg = color8
c.colors.tabs.selected.odd.bg = color8

# Color for the tab indicator
c.colors.tabs.indicator.error = background_color 
c.colors.tabs.indicator.start = background_color
c.colors.tabs.indicator.stop = background_color



#c.colors.prompts.bg = colora
#c.colors.prompts.fg = color15
#c.colors.prompts.selected.bg = color13
#c.colors.prompts.border = 'none'


c.fonts.monospace = 'Hack, "Wuncon Siji", Cantarell'

c.fonts.prompts = '11pt monospace'
c.fonts.statusbar = '11pt monospace'
c.fonts.tabs = '11pt monospace'
c.fonts.messages.error = '11pt monospace'
c.fonts.messages.info = '11pt monospace'
c.fonts.messages.warning = '11pt monospace'
c.fonts.keyhint = '11pt monospace'
c.fonts.hints = '11pt monospace'
c.fonts.downloads = '11pt monospace'
c.fonts.debug_console = '11pt monospace'
c.fonts.completion.entry = '11pt monospace'
c.fonts.completion.category = 'bold 11pt monospace'



# Open new windows in private browsing mode which does not record
# visited pages.
# Type: Bool
c.content.private_browsing = False

c.colors.hints.bg = color10
c.colors.hints.fg = color7 
c.hints.border = '0px solid #000000'
#c.hints.find_implementation = 'javascript'
c.hints.auto_follow_timeout = 100 

c.prompt.radius = 0

# Editor (and arguments) to use for the `open-editor` command. The
# following placeholders are defined: * `{file}`: Filename of the file
# to be edited. * `{line}`: Line in which the caret is found in the
# text. * `{column}`: Column in which the caret is found in the text. *
# `{line0}`: Same as `{line}`, but starting from index 0. * `{column0}`:
# Same as `{column}`, but starting from index 0.
# Type: ShellCommand
c.editor.command = ['vim', '-f', '{file}', '-c', 'normal {line}G{column0}l']

# Leave insert mode if a non-editable element is clicked.
# Type: Bool
c.input.insert_mode.auto_leave = True

# Automatically enter insert mode if an editable element is focused
# after loading the page.
# Type: Bool
c.input.insert_mode.auto_load = False

# Switch to insert mode when clicking flash and other plugins.
# Type: Bool
c.input.insert_mode.plugins = False

# Include hyperlinks in the keyboard focus chain when tabbing.
# Type: Bool
c.input.links_included_in_focus_chain = True

# Enable smooth scrolling for web pages. Note smooth scrolling does not
# work with the `:scroll-px` command.
# Type: Bool
c.scrolling.smooth = True

# Padding (in pixels) around text for tabs.
# Type: Padding
c.tabs.padding = {'bottom': 10, 'left': 10, 'right': 10, 'top': 10}

# Position of the tab bar.
# Type: Position
# Valid values:
#   - top
#   - bottom
#   - left
#   - right
c.tabs.position = 'left'

# Format to use for the tab title. The following placeholders are
# defined:  * `{perc}`: Percentage as a string like `[10%]`. *
# `{perc_raw}`: Raw percentage, e.g. `10`. * `{title}`: Title of the
# current web page. * `{title_sep}`: The string ` - ` if a title is set,
# empty otherwise. * `{index}`: Index of this tab. * `{id}`: Internal
# tab ID of this tab. * `{scroll_pos}`: Page scroll position. *
# `{host}`: Host of the current web page. * `{backend}`: Either
# ''webkit'' or ''webengine'' * `{private}`: Indicates when private mode
# is enabled. * `{current_url}`: URL of the current web page. *
# `{protocol}`: Protocol (http/https/...) of the current web page.
# Type: FormatString
c.tabs.title.format = '{title}'

# Format to use for the tab title for pinned tabs. The same placeholders
# like for `tabs.title.format` are defined.
# Type: FormatString
c.tabs.title.format_pinned = '[{index}]'

# Width (in pixels or as percentage of the window) of the tab bar if
# it's vertical.
# Type: PercOrInt
c.tabs.width = 192

# Page to open if :open -t/-b/-w is used without URL. Use `about:blank`
# for a blank page.
# Type: FuzzyUrl
c.url.default_page = 'https://google.com'

# URL segments where `:navigate increment/decrement` will search for a
# number.
# Type: FlagList
# Valid values:
#   - host
#   - port
#   - path
#   - query
#   - anchor
c.url.incdec_segments = ['path', 'query']

# Search engines which can be used via the address bar. Maps a search
# engine name (such as `DEFAULT`, or `ddg`) to a URL with a `{}`
# placeholder. The placeholder will be replaced by the search term, use
# `{{` and `}}` for literal `{`/`}` signs. The search engine named
# `DEFAULT` is used when `url.auto_search` is turned on and something
# else than a URL was entered to be opened. Other search engines can be
# used by prepending the search engine name to the search term, e.g.
# `:open google qutebrowser`.
# Type: Dict
c.url.searchengines = {'DEFAULT': 'https://www.google.com/search?hl=en&q={}', 'y': 'https://youtube.com/results?search_query={}'}

# Page(s) to open at the start.
# Type: List of FuzzyUrl, or FuzzyUrl
c.url.start_pages = ['https://google.com']

c.scrolling.smooth = False
c.tabs.background = True
